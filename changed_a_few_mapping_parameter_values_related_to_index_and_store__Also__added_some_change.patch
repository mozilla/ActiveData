Index: pyLibrary/queries/meta.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pyLibrary/queries/meta.py	(revision d3a06412cf0192073f6cd6b9e071c21b87178d9b)
+++ pyLibrary/queries/meta.py	(revision )
@@ -252,6 +252,8 @@
         """
         if c.type in STRUCT:
             Log.error("not supported")
+        # if c.es_column == "_id":
+        #     Log.error("_id is not supported in cardinality")
         try:
             if c.es_index == "meta.columns":
                 with self.meta.columns.locker:
@@ -281,13 +283,25 @@
                 return
 
             es_index = c.es_index.split(".")[0]
-            result = self.default_es.post("/" + es_index + "/_search", data={
-                "aggs": {c.names["."]: _counting_query(c)},
-                "size": 0
-            })
-            r = result.aggregations.values()[0]
+            if c.es_column == "_id":
+                result = self.default_es.post("/" + es_index + "/_search", data={
+                    "query": {
+                        "match_all": {}
+                    },
+                    "size": 0
+                })
+            else:
+                result = self.default_es.post("/" + es_index + "/_search", data={
+                    "aggs": {c.names["."]: _counting_query(c)},
+                    "size": 0
+                })
+
             count = result.hits.total
-            cardinality = coalesce(r.value, r._nested.value, 0 if r.doc_count==0 else None)
+            if c.es_column == "_id":
+                cardinality = count
+            else:
+                r = result.aggregations.values()[0]
+                cardinality = coalesce(r.value, r._nested.value, 0 if r.doc_count==0 else None)
             if cardinality == None:
                 Log.error("logic error")
 
@@ -323,10 +337,10 @@
             elif len(c.nested_path) != 1:
                 query.aggs[literal_field(c.names["."])] = {
                     "nested": {"path": c.nested_path[0]},
-                    "aggs": {"_nested": {"terms": {"field": c.es_column, "size": 0}}}
+                    "aggs": {"_nested": {"terms": {"field": c.es_column, "size": 1}}}
                 }
             else:
-                query.aggs[literal_field(c.names["."])] = {"terms": {"field": c.es_column, "size": 0}}
+                query.aggs[literal_field(c.names["."])] = {"terms": {"field": c.es_column, "size": 1}}
 
             result = self.default_es.post("/" + es_index + "/_search", data=query)
 
Index: resources/schema/request_log.schema.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- resources/schema/request_log.schema.json	(revision d3a06412cf0192073f6cd6b9e071c21b87178d9b)
+++ resources/schema/request_log.schema.json	(revision )
@@ -7,9 +7,6 @@
 	},
 	"mappings": {
 		"request_log": {
-//			"_source": {
-//				"compress": true
-//			},
 			"dynamic_templates": [
 				{
 					"default_strings": {
@@ -36,22 +33,16 @@
 					"type": "string"
 				},
 				"query": {
-					"type": "string",
-//					"enabled": false,
-					"index": "no"
-//					"store": true
+					"type": "object",
+					"enabled": false
 				},
 				"data": {
 					"index": "not_analyzed",
 					"type": "string"
-
 				},
 				"error": {
-					"type": "string",
-//					"enabled": false,
-					"index": "no"
-//					"store": true
-
+					"type": "object",
+					"enabled": false
 				},
 				"from": {
 					"index": "not_analyzed",
Index: resources/config/elasticsearch.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- resources/config/elasticsearch.yml	(revision d3a06412cf0192073f6cd6b9e071c21b87178d9b)
+++ resources/config/elasticsearch.yml	(revision )
@@ -25,7 +25,6 @@
 
 index.number_of_shards: 1
 index.number_of_replicas: 1
-# index.cache.field.type: soft
 index.translog.interval: 60s
 index.translog.flush_threshold_size: 1gb
 
Index: active_data/actions/save_query.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- active_data/actions/save_query.py	(revision d3a06412cf0192073f6cd6b9e071c21b87178d9b)
+++ active_data/actions/save_query.py	(revision )
@@ -172,8 +172,6 @@
         "index.number_of_shards": 3,
         "index.number_of_replicas": 2,
         "index.store.throttle.type": "merge"
-        # "index.cache.filter.expire": "1m"
-        # "index.cache.field.type": "soft",
     },
     "mappings": {
         "_default_": {
@@ -184,7 +182,7 @@
                         "match_mapping_type": "string",
                         "mapping": {
                             "type": "string",
-                            "index": "no"
+                            "index": "not_analyzed"
                         }
                     }
                 }
@@ -199,23 +197,18 @@
                 "create_time": {
                     "type": "double",
                     "index": "not_analyzed"
-                    # "store": True
                 },
                 "last_used": {
                     "type": "double",
                     "index": "not_analyzed"
-                    # "store": True
                 },
                 "hash": {
                     "type": "string",
                     "index": "not_analyzed"
-                    # "store": True
                 },
                 "query": {
-                    "type": "string",
-                    # "enabled": False,
-                    "index": "no"
-                    # "store": True
+                    "type": "object",
+                    "enabled": False
                 }
             }
         }
